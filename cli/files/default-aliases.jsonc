[
    [
        // Git aliases
        //    {
        //        "name": "gb",
        //        "description": "Checkout a branch (or create one if it doesn't exist)",
        //        "func": [
        //            "local branch_name=\"$1\"",
        //            "if [ -z \"$branch_name\" ]; then",
        //            "    git branch -a",
        //            "elif git rev-parse --verify \"$branch_name\" >/dev/null 2>&1; then",
        //            "    git checkout \"$branch_name\"",
        //            "else",
        //            "    git checkout -B \"$branch_name\"",
        //            "fi"
        //        ]
        //    },
        //    {
        //        "name": "gd",
        //        "description": "Delete a branch (and prune remote)",
        //        "func": [
        //            "local branch_name=\"$1\"",
        //            "if [ -z \"$branch_name\" ]; then",
        //            "    echo \"Error: Branch name cannot be empty.\"",
        //            "    exit 1",
        //            "fi",
        //            "git remote prune origin",
        //            "git branch -d \"$branch_name\""
        //        ]
        //    },
        {
            "name": "gl",
            "description": "Pull (and fetch all) changes from a remote repository",
            "cmd": "git pull && git fetch --all"
        },
        {
            "name": "gp",
            "description": "Add, commit and push changes to a remote repository",
            "func": [
                "if [ -z \"$1\" ]; then",
                "    echo \"Error: Commit message cannot be empty.\"",
                "    exit 1",
                "fi",
                "git add .",
                "git commit -m \"$*\"",
                "git push"
            ]
        },
        {
            "name": "gs",
            "description": "Shows the comprehensive status of the current repository",
            "cmd": "git status --ignored --show-stash && git --no-pager diff"
        },

        // Python aliases
        {
            "name": "pb",
            "description": "Build a python package",
            "cmd": "python3.11 setup.py sdist bdist_wheel"
        },
        {
            "name": "pf",
            "description": "Freeze all installed python packages",
            "cmd": "python3.11 -m pip freeze"
        },
        {
            "name": "pfo",
            "description": "Freeze all installed python packages and output to a requirements file in the current directory",
            "cmd": "python3.11 -m pip freeze > requirements.txt"
        },
        {
            "name": "pi",
            "description": "Install a python package for the baseline interpreter",
            "cmd": "python3.11 -m pip install"
        },
        {
            "name": "pie",
            "description": "Install a python package in editable mode",
            "cmd": "python3.11 -m pip install -e ."
        },
        {
            "name": "pir",
            "description": "Install all python packages in the specified .txt file",
            "cmd": "python3.11 -m pip install -r"
        },
        {
            "name": "pl",
            "description": "View the installed python packages in a more detailed format",
            "cmd": "python3.11 -m pip list --format=columns"
        },
        {
            "name": "pt",
            "description": "Run pytest with the specified arguments",
            "cmd": "python3.11 -m pytest -s -rf --disable-warnings --tb=native --showlocals --color=yes --maxfail=1"
        },
        {
            "name": "ptr",
            "description": "Run pytest periodically with a passed argument interval in seconds",
            "func": [
                "while true; do clear; python3.11 -m pytest -s -rf --disable-warnings --tb=native --showlocals --color=yes --maxfail=1; sleep $1; done"
            ]
        },
        {
            "name": "pv",
            "description": "Activate the first python virtual environment found in the directory",
            "func": [
                "dir=\"${1:-.}\"",
                "local venv_dir",
                "venv_dir=$(find \"$dir\" -type d -name '*venv' | head -n 1)",
                "if [ -n \"$venv_dir\" ]; then",
                "    . \"$venv_dir/bin/activate\" && echo \"Activated virtual environment: $venv_dir\"",
                "else",
                "    echo \"No 'venv' directory found.\"",
                "    return 1",
                "fi"
            ]
        },
        {
            "name": "pvc",
            "description": "Create a python virtual environment with the given name",
            "func": [
                "if [ -z \"$1\" ]; then",
                "    echo \"Usage: pvc <env_name>\"",
                "    return 1",
                "fi",
                "local env_name=\"$1\"",
                "if [ -d \"$env_name\" ]; then",
                "    echo \"Directory \"$env_name\" already exists.\"",
                "    return 1",
                "fi",
                "python3.11 -m venv \"$env_name\" && echo \"Virtual environment '$env_name' created.\""
            ]
        },
        {
            "name": "pvd",
            "description": "Deactivate the current virtual environment",
            "cmd": "deactivate"
        },
        {
            "name": "py",
            "description": "Run a python script with the baseline interpreter",
            "cmd": "python3.11"
        },

        // Other useful aliases
        {
            "name": "c",
            "description": "Clear the terminal screen",
            "cmd": "clear"
        },
        {
            "name": "clean-all",
            "description": "Search and delete venv, node_modules, and temporary files",
            "func": [
                "echo \"Searching and deleting venv and node_modules directories, ignoring .git\"",
                "sudo find . \\( -path \"./.git\" -o -path \"./node_modules\" \\) -prune -o \\",
                "    -type d \\( -exec test -f '{}/pyvenv.cfg' \\; -o -path '{}/bin' -o -path '{}/Scripts' \\) -print -exec rm -rf {} +",
                "sudo find . \\( -path \"./.git\" -o -path \"./venv\" \\) -prune -o \\",
                "    -type d -name \"node_modules\" -print -exec rm -rf {} +",
                "clean-trash"
            ]
        },
        {
            "name": "clean-trash",
            "description": "Delete temporary and cached files",
            "func": [
                "echo \"Searching and deleting .zone.identifier files, .pytest_cache, and __pycache__ directories\"",
                "find . \\( -path \"./.git\" -o -path \"./node_modules\" -o -path \"./venv\" \\) -prune -o \\",
                "    -type d -name \".pytest_cache\" -print -exec sudo rm -rf {} +",
                "find . \\( -path \"./.git\" -o -path \"./node_modules\" -o -path \"./venv\" \\) -prune -o \\",
                "    -type d -name \"__pycache__\" -print -exec sudo rm -rf {} +",
                "find . \\( -path \"./.git\" -o -path \"./node_modules\" -o -path \"./venv\" \\) -prune -o \\",
                "    -type f -name \"*:Zone.Identifier\" -print -exec sudo rm -f {} +",
                "echo \"Cleanup complete.\""
            ]
        },
        {
            "name": "home",
            "description": "Navigate to home directory",
            "cmd": "cd ~"
        },
        {
            "name": "l",
            "description": "List files with details and color",
            "cmd": "ls -g -h -F -la --color=always"
        },
        {
            "name": "rc",
            "description": "Edit the bash configuration file",
            "cmd": "vim ~/.bashrc"
        },
        {
            "name": "rf",
            "description": "Delete files or directories with confirmation",
            "func": [
                "if [ \"$1\" == \".\" ]; then",
                "    echo \"Warning: You are about to delete EVERYTHING inside the current directory!\"",
                "    read -p \"This action is irreversible. Are you sure? (Press Enter to confirm or Ctrl+C to abort): \" confirm1",
                "    if [ -z \"$confirm1\" ]; then",
                "        read -p \"This will delete ALL files and subdirectories. Are you absolutely sure? (Press Enter to confirm or Ctrl+C to abort): \" confirm2",
                "        if [ -z \"$confirm2\" ]; then",
                "            echo \"Deleting everything inside the current directory...\"",
                "            rm -rf ./*",
                "        else",
                "            echo \"Operation aborted.\"",
                "        fi",
                "    else",
                "        echo \"Operation aborted.\"",
                "    fi",
                "else",
                "    echo \"Are you sure you want to delete '$1'? This action is irreversible.\"",
                "    read -p \"Press Enter to confirm or Ctrl+C to abort: \" confirm",
                "    if [ -z \"$confirm\" ]; then",
                "        rm -rf \"$1\"",
                "    else",
                "        echo \"Operation aborted.\"",
                "    fi",
                "fi"
            ]
        },
        {
            "name": "root",
            "description": "Navigate to the root directory",
            "cmd": "cd /"
        },
        {
            "name": "src",
            "description": "Reload the bash configuration file",
            "cmd": ". ~/.bashrc"
        },
        {
            "name": "srf",
            "description": "Delete files or directories with confirmation (using sudo)",
            "func": [
                "if [ \"$1\" == \".\" ]; then",
                "    echo \"Warning: You are about to delete EVERYTHING inside the current directory!\"",
                "    read -p \"This action is irreversible. Are you sure? (Press Enter to confirm or Ctrl+C to abort): \" confirm1",
                "    if [ -z \"$confirm1\" ]; then",
                "        read -p \"This will delete ALL files and subdirectories. Are you absolutely sure? (Press Enter to confirm or Ctrl+C to abort): \" confirm2",
                "        if [ -z \"$confirm2\" ]; then",
                "            echo \"Deleting everything inside the current directory...\"",
                "            sudo rm -rf ./*",
                "        else",
                "            echo \"Operation aborted.\"",
                "        fi",
                "    else",
                "        echo \"Operation aborted.\"",
                "    fi",
                "else",
                "    echo \"Are you sure you want to delete '$1'? This action is irreversible.\"",
                "    read -p \"Press Enter to confirm or Ctrl+C to abort: \" confirm",
                "    if [ -z \"$confirm\" ]; then",
                "        sudo rm -rf \"$1\"",
                "    else",
                "        echo \"Operation aborted.\"",
                "    fi",
                "fi"
            ]
        }
    ],
    {
        "name": "tt",
        "help": "Change directory to teatype source path",
        "command": "cd $TEATYPE_SOURCE_PATH"
    },
    {
        "name": "ttp",
        "help": "Change directory to teatype python source path",
        "command": "cd $TEATYPE_PYTHON_SOURCE_PATH"
    },
    {
        "name": "tts",
        "help": "Change directory to teatype typescript source path",
        "command": "cd $TEATYPE_TYPESCRIPT_SOURCE_PATH"
    }
]
