#!/usr/bin/env python3.11

# Copyright (C) 2024-2025 Burak GÃ¼naydin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# System imports
import os
import re
import subprocess

# From package imports
from teatype.cli import BaseCLI
from teatype.enum import EscapeColor
from teatype.io import env, enable_sudo, file, path
from teatype.logging import *

BASHRC_FILE = os.path.expanduser('~/.bashrc')
ENV_END_MARK = '# --- TEATYPE ENV VARS END --- #'
ENV_START_MARK = '# --- TEATYPE ENV VARS BEGIN --- #'
ENV_FILE = '/etc/environment'

class Environment(BaseCLI):
    def meta(self):
        return {
            'name': 'environment',
            'shorthand': 'env',
            'help': 'Manage the (system) environment variables for the TeaType project.',
            'commands': [
                {
                    'name': 'eject',
                    'shorthand': 'ej',
                    'help': 'Eject the currently custom defined environment variables from the system.',
                },
                {
                    'name': 'list',
                    'shorthand': 'ls',
                    'help': 'List all (pre-injected) available environment variables for the current project.',
                },
                {
                    'name': 'inject',
                    'shorthand': 'in',
                    'help': 'Inject the currently custom defined environment variables into the system.',
                },
                {
                    'name': 'status',
                    'shorthand': 'st',
                    'help': 'Show whether the environment variables are currently injected or not.',
                }
            ]
        }

    # Function to replace {{VARIABLE_NAME}} with the corresponding environment variable value
    def replace_env_variables(self, content, use_values=True):
        return re.sub(
            r'\{\{([A-Za-z_][A-Za-z0-9_]*)\}\}',
            lambda match: os.environ.get(match.group(1), '') if use_values else match.group(1),
            content,
        )
        
    def inject_system_env_vars(self, env_vars:dict):
        enable_sudo()

        self.eject_system_env_vars(auto_mode=True)

        # Update /etc/environment
        self._inject_env_block(ENV_FILE, env_vars, shell_style=False)

        # Update ~/.bashrc (for shell sessions)
        self._inject_env_block(BASHRC_FILE, env_vars, shell_style=True)

        # Inject into /etc/profile.d/teatype.sh
        profile_script = ['# Auto-generated TeaType environment\n']
        for k, v in env_vars.items():
            v_clean = v.strip().replace('"', '\\"')
            profile_script.append(f'export {k}="{v_clean}"\n')

        subprocess.run(['sudo', 'tee', '/etc/profile.d/teatype-vars.sh'],
                       input=''.join(profile_script),
                       text=True,
                       stdout=subprocess.DEVNULL)

        # Inject into /etc/systemd/system.conf.d/teatype.conf
        systemd_env_lines = ['[Manager]\n']
        exports = [f'{k}={v}' for k, v in env_vars.items()]
        systemd_env_lines.append(f'DefaultEnvironment=' + ' '.join(exports) + '\n')

        subprocess.run(['sudo', 'mkdir', '-p', '/etc/systemd/system.conf.d/'])
        subprocess.run(['sudo', 'tee', '/etc/systemd/system.conf.d/teatype-vars.conf'],
                       input=''.join(systemd_env_lines),
                       text=True,
                       stdout=subprocess.DEVNULL)

        subprocess.run(['sudo', 'systemctl', 'daemon-reexec'])

        println()
        success('Successfully injected environment variables system-wide.')
        println()
        hint('To apply to your current terminal, run:')
        println()
        hint('  export $(grep -v "^#" /etc/environment | xargs)', use_prefix=False)
        println()
        hint('     - or -', use_prefix=False)
        println()
        hint('  exec bash', use_prefix=False)
        println()
        hint('For systemd and GUI apps, a reboot is recommended.')

    def eject_system_env_vars(self, auto_mode:bool=False):
        if not auto_mode:
            enable_sudo()

        # Remove blocks from files
        self._remove_env_block(ENV_FILE)
        self._remove_env_block(BASHRC_FILE)

        # Remove profile script and systemd config
        subprocess.run(['sudo', 'rm', '-f', '/etc/profile.d/teatype-vars.sh'])
        subprocess.run(['sudo', 'rm', '-f', '/etc/systemd/system.conf.d/teatype-vars.conf'])
        subprocess.run(['sudo', 'systemctl', 'daemon-reexec'])

        if not auto_mode:
            println()
            success(f'Successfully updated {ENV_FILE}')
            hint('Please reboot the system or run:\n\n   export $(grep -v "^#" /etc/environment | xargs)\n')

    def list_available_env_vars(self, env_vars:dict):
        println()
        log(f'Available {EscapeColor.GRAY}(custom TeaType){EscapeColor.RESET} environment variables:')
        max_line_width = max([len(k) for k in env_vars.keys()])
        for key, value in env_vars.items():
            value = value or 'null'
            log(f'   {EscapeColor.MAGENTA}{key.ljust(max_line_width)}    {EscapeColor.CYAN}{value}')

    def status_system_env_vars(self):
        log('Checking whether environment variable blocks exist or not:')
        println()
        etc_environment = self._check_env_block_status('/etc/environment')
        teatype_profile_env = self._check_env_block_status('/etc/profile.d/teatype-vars.sh', check_block=False)
        teatype_system_env = self._check_env_block_status('/etc/systemd/system.conf.d/teatype-vars.conf', check_block=False)
        bashrc = self._check_env_block_status(os.path.expanduser('~/.bashrc'))
        
        if etc_environment and teatype_profile_env and teatype_system_env and bashrc:
            success('All environment variable blocks are present and correctly configured.')
        elif etc_environment or teatype_profile_env or teatype_system_env or bashrc:
            warn('Some environment variable blocks are present, but not all are correctly configured. Please check the logs above for details.')
            if not etc_environment:
                err('The /etc/environment block is missing or not correctly configured.', use_prefix=False, verbose=False)
            if not teatype_profile_env:
                err('The /etc/profile.d/teatype.sh block is missing or not correctly configured.', use_prefix=False, verbose=False)
            if not teatype_system_env:
                err('The /etc/systemd/system.conf.d/teatype.conf block is missing or not correctly configured.', use_prefix=False, verbose=False)
            if not bashrc:
                err('The ~/.bashrc block is missing or not correctly configured.', use_prefix=False, verbose=False)
        else:
            err('No environment variable blocks found. Please inject them first using `tt env inject`.', use_prefix=False, verbose=False)

    def _inject_env_block(self, filepath, env_vars, shell_style=False):
        # Read current content
        try:
            with open(filepath, 'r') as f:
                lines = f.readlines()
        except FileNotFoundError:
            lines = []

        # Remove existing block
        inside_block = False
        new_lines = []
        for line in lines:
            if ENV_START_MARK in line:
                inside_block = True
                continue
            if ENV_END_MARK in line:
                inside_block = False
                continue
            if not inside_block:
                new_lines.append(line)

        # Add new block
        new_lines.append(f'\n{ENV_START_MARK}\n')
        for k, v in env_vars.items():
            k, v = k.strip(), (v or '').strip()
            v = v.replace('"', '\\"')
            if shell_style:
                new_lines.append(f'export {k}="{v}"\n')
            else:
                v = v.replace('\n', ' ')
                new_lines.append(f'{k}="{v}"\n')
        new_lines.append(f'{ENV_END_MARK}\n')

        # Write back
        if filepath.startswith('/etc/'):
            proc = subprocess.Popen(['sudo', 'tee', filepath],
                                    stdin=subprocess.PIPE,
                                    stdout=subprocess.DEVNULL,
                                    stderr=subprocess.DEVNULL,
                                    text=True)
            proc.communicate(''.join(new_lines).strip() + '\n')
        else:
            with open(filepath, 'w') as f:
                f.write(''.join(new_lines).strip() + '\n')

    def _remove_env_block(self, filepath):
        try:
            with open(filepath, 'r') as f:
                lines = f.readlines()
        except FileNotFoundError:
            return

        inside_block = False
        new_lines = []
        for line in lines:
            if ENV_START_MARK in line:
                inside_block = True
                continue
            if ENV_END_MARK in line:
                inside_block = False
                continue
            if not inside_block:
                new_lines.append(line)

        if filepath.startswith('/etc/'):
            proc = subprocess.Popen(['sudo', 'tee', filepath],
                                    stdin=subprocess.PIPE,
                                    stdout=subprocess.DEVNULL,
                                    stderr=subprocess.DEVNULL,
                                    text=True)
            proc.communicate(''.join(new_lines).strip() + '\n')
        else:
            with open(filepath, 'w') as f:
                f.write(''.join(new_lines).strip() + '\n')

    def _check_env_block_status(self, filepath, check_block=True) -> bool:
        checkmark = '\u2705' # â
        crossmark = '\u274C' # â
        exists = os.path.exists(filepath)
        block_found = False

        if exists and check_block:
            try:
                with open(filepath, 'r') as f:
                    content = f.read()
                block_found = ENV_START_MARK in content and ENV_END_MARK in content
            except Exception:
                block_found = False
        elif exists:
            block_found = True

        symbol = checkmark if block_found else crossmark
        status_message = f' {symbol} - {filepath}'
        if block_found:
            success(status_message)
        else:
            err(status_message, use_prefix=False, verbose=False)
        println()
        return block_found

    def execute(self):
        println()
        
        parent_directoy = path.caller_parent(reverse_depth=2, stringify=False)
        grandparent_directory = parent_directoy.parent
        teatype_env_path = path.join(grandparent_directory, '.env')
        teatype_variables = file.read(teatype_env_path)

        command = self.get_command()
        if command == 'inject':
            self.inject_system_env_vars(teatype_variables)
        elif command == 'eject':
            self.eject_system_env_vars()
        elif command == 'list':
            self.list_available_env_vars(teatype_variables)
        elif command == 'status':
            self.status_system_env_vars()

        println()

if __name__ == '__main__':
    Environment()